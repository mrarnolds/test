name: Release Please

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  # Manually trigger release-please through a pull request and commit
  trigger-release:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.RELEASE_PLEASE_TOKEN }}
      TRIGGER_BRANCH: release-please--trigger--${{ github.ref_name }}

    steps:
      - name: Install GitHub CLI
        run: |
          curl -sS https://webi.sh/gh | sh
          source ~/.config/envman/PATH.env

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Github actions bot user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Delete existing trigger branch
        run: |
          git push origin --delete "${{ env.TRIGGER_BRANCH }}" || true

      - name: Create empty trigger commit
        run: |
          git commit --allow-empty -m "chore(release): no user facing changes"

      - name: Create pull request
        id: cpr
        uses: peter-evans/create-pull-request@v7
        with:
          branch: "${{ env.TRIGGER_BRANCH }}"
          title: "chore: trigger release"
          labels: "autorelease:manual"
          body: "Automates the creation of a Release Please PR. No user facing changes."
          delete-branch: true

      - name: Merge pull request
        if: steps.cpr.outputs.pull-request-number != ''
        run: |
          echo "Merging PR #${{ steps.cpr.outputs.pull-request-number }}"
          gh pr merge ${{ steps.cpr.outputs.pull-request-number }} --squash --delete-branch --admin || echo "::warning::You must manually merge the trigger pull request: https://github.com/${{ github.repository }}/pull/${{ steps.cpr.outputs.pull-request-number }}"

      - name: Cleanup root files and folders
        if: always()
        continue-on-error: true
        run: find . -mindepth 1 -maxdepth 1 -not -name "." -not -name ".." -exec rm -rf {} +

  # Depend on trigger-release manually dispatched otherwise run standalone
  release-please:
    needs: trigger-release
    if: github.event_name != 'workflow_dispatch' || success()
    runs-on: ubuntu-latest
    outputs:
      pr: ${{ steps.release.outputs.pr }}
      prs_created: ${{ steps.release.outputs.prs_created }}
      release_created: ${{ steps.release.outputs.release_created }}
      major: ${{ steps.release.outputs.major }}
      minor: ${{ steps.release.outputs.minor }}
      patch: ${{ steps.release.outputs.patch }}
    steps:
      - name: Github actions bot user
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Release please
        id: release
        uses: googleapis/release-please-action@v4
        with:
          token: ${{ secrets.RELEASE_PLEASE_TOKEN }}
          target-branch: ${{ github.ref_name }}
          manifest-file: ".release-please/release-please-manifest.json"
          config-file: ".release-please/release-please-config.json"

      - name: Release please debug
        run: |
          echo "Release created: ${{ steps.release.outputs.release_created }}"
          echo "Pull request created: ${{ steps.release.outputs.prs_created }}"
          echo "Pull request headBranchName: ${{ fromJSON(steps.release.outputs.pr || '{}').headBranchName || '-' }}"

      - name: Cleanup root files and folders
        if: always()
        continue-on-error: true
        run: find . -mindepth 1 -maxdepth 1 -not -name "." -not -name ".." -exec rm -rf {} +

  # Generate public changelog if a release PR was created
  public-changelog:
    needs: release-please
    runs-on: ubuntu-latest
    if: >
      needs.release-please.outputs.prs_created == 'true' &&
      (github.event_name != 'workflow_dispatch' || success())
    steps:
      - name: Checkout release branch
        uses: actions/checkout@v4
        with:
          ref: ${{ fromJSON(needs.release-please.outputs.pr).headBranchName }}

      - name: Github actions bot user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Generate public changelog and capture output
        id: public-changelog
        run: |
          path=$(npm run changelog:public --silent)
          echo "path=$path" >> $GITHUB_OUTPUT

      - name: Commit file to release PR
        run: |
          git add ${{ steps.public-changelog.outputs.path }}
          git commit -m "chore: generate public changelog" || echo "No changes to commit"
          git fetch origin ${{ fromJSON(needs.release-please.outputs.pr).headBranchName }}
          git rebase origin/${{ fromJSON(needs.release-please.outputs.pr).headBranchName }}
          git push origin HEAD:${{ fromJSON(needs.release-please.outputs.pr).headBranchName }}

      - name: Cleanup root files and folders
        if: always()
        continue-on-error: true
        run: find . -mindepth 1 -maxdepth 1 -not -name "." -not -name ".." -exec rm -rf {} +

  # Create JIRA release
  jira-release:
    runs-on: ubuntu-latest
    needs: release-please
    if: >
      needs.release-please.outputs.release_created == 'true' &&
      (github.event_name != 'workflow_dispatch' || success())
    steps:
      - name: Checkout branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Create Jira Release
        run: |
          curl -X POST "${{ vars.JIRA_API_URL }}/version" \
            --user "${{ vars.JIRA_EMAIL }}:${{ secrets.JIRA_API_TOKEN }}" \
            --header 'Content-Type: application/json' \
            --data '{
              "name": "FE Release v${{ github.event.inputs.version }}",
              "project": "PDP",
              "released": false,
              "releaseDate": "'"$(date +%Y-%m-%d)"'"
            }'
